# Generated by Django 4.2 on 2023-04-20 09:54

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eventname', models.CharField(default='', max_length=100, verbose_name='Название мероприятия')),
                ('eventstartday', models.DateTimeField(default=datetime.datetime(2023, 4, 20, 12, 54, 51, 462405), verbose_name='Начало мероприятия')),
                ('eventendday', models.DateTimeField(default=datetime.datetime(2023, 4, 20, 12, 54, 51, 462405), verbose_name='Конец мероприятия')),
                ('eventdescription', models.CharField(default='', max_length=500, verbose_name='Описание мероприятия')),
                ('ticketprice', models.IntegerField(default=0, verbose_name='Цена билета')),
                ('eventminage', models.IntegerField(default=0, verbose_name='Минимальный возраст для посещения')),
                ('evemntpic', models.ImageField(default=0, upload_to='imgs/events/', verbose_name='Промо-фото')),
                ('hostname', models.SlugField(allow_unicode=1, default='', max_length=100, verbose_name='Организатор')),
                ('hostemail', models.EmailField(default='', max_length=100, verbose_name='Почта организатора')),
                ('hosttg', models.CharField(default='', max_length=100, verbose_name='Телеграм организатора')),
            ],
        ),
        migrations.CreateModel(
            name='ProductVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='video/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4'])])),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='File', to='main.event')),
            ],
        ),
        migrations.CreateModel(
            name='NewUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, null=True)),
                ('mobilephone', models.CharField(default='', max_length=12, verbose_name='Номер телефона')),
                ('middle_name', models.CharField(default='', max_length=100, verbose_name='Отчество')),
                ('password1', models.CharField(max_length=100, verbose_name='Пароль')),
                ('password2', models.CharField(max_length=100, verbose_name='Ещё раз')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('username', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
